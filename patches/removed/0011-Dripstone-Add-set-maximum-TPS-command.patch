From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Noah van der Aa <ndvdaa@gmail.com>
Date: Thu, 29 Jul 2021 14:49:17 +0200
Subject: [PATCH] (Dripstone) Add set maximum TPS command

Original code by NoahvdAa, can be found at https://github.com/NoahvdAa/Dripstone

diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 7a86357ea75db7263598b79d31d4ae9abe5e4b50..0d11409d71eb273f4053fc25b5b8c408a685ed96 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -70,6 +70,7 @@ public class PaperConfig {
         commands = new HashMap<String, Command>();
         commands.put("paper", new PaperCommand("paper"));
         commands.put("mspt", new MSPTCommand("mspt"));
+        commands.put("setmaxtps", new me.noahvdaa.dripstone.SetMaxTPSCommand("setmaxtps")); // Dripstone - TODO: Move this to DripstoneConfig class.
 
         version = getInt("config-version", 20);
         set("config-version", 20);
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index dc6bc1910ad0f9b27144d5750078c3ca607d03d3..835ffe71f5b41c9da43884978e87c572c986b777 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -82,6 +82,6 @@ public class RAMDetails extends JList<String> {
 
     private static String format(double tps)
     {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return (tps > net.minecraft.server.dedicated.DedicatedServer.TPS * 1.05f ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, net.minecraft.server.dedicated.DedicatedServer.TPS); // Dripstone - compatibility with setMaxTPS command.
     }
 }
diff --git a/src/main/java/me/noahvdaa/dripstone/SetMaxTPSCommand.java b/src/main/java/me/noahvdaa/dripstone/SetMaxTPSCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..d31951e83ff3256420c57eac8f9fc16183f1565d
--- /dev/null
+++ b/src/main/java/me/noahvdaa/dripstone/SetMaxTPSCommand.java
@@ -0,0 +1,73 @@
+package me.noahvdaa.dripstone;
+
+import net.minecraft.server.MinecraftServer;
+import org.apache.commons.lang3.math.NumberUtils;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.util.Collections;
+import java.util.List;
+
+public class SetMaxTPSCommand extends Command {
+    public SetMaxTPSCommand(String name) {
+        super(name);
+        this.description = "Changes the maximum TPS for the server";
+        this.usageMessage = "/setmaxtps [tps] [duration until the change is reverted, in ticks]";
+        this.setPermission("bukkit.command.setmaxtps");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        int targetMSPT = 50;
+        int resetTPSIn = -1;
+
+        if (args.length == 0) {
+            sender.sendMessage("§6Maximum TPS has been reset to 20.");
+        } else {
+            if (args.length > 2 || !NumberUtils.isParsable(args[0]) || (args.length == 2 && !NumberUtils.isParsable(args[1]))) {
+                sender.sendMessage("§cUsage: /setmaxtps [tps] [duration until the change is reverted, in ticks]");
+                return true;
+            }
+
+            int targetTPS = Integer.parseInt(args[0]);
+
+            // Don't allow negative or zero TPS.
+            if (targetTPS < 1) {
+                sender.sendMessage("§cThe target TPS must be at least 1.");
+                return true;
+            }
+
+            targetMSPT = 1000 / targetTPS;
+
+            if (args.length == 2) {
+                resetTPSIn = Integer.parseInt(args[1]);
+                if (resetTPSIn < 1) {
+                    sender.sendMessage("§cThe TPS reset duration must be at least 1 tick.");
+                    return true;
+                }
+
+                sender.sendMessage("§6Maximum TPS has been set to " + targetTPS + " and will be reset to 20 in " + resetTPSIn + " tick" + (resetTPSIn == 1 ? "" : "s") + ". This will probably a lot of plugins!");
+            } else {
+                sender.sendMessage("§6Maximum TPS has been set to " + targetTPS + ". This will break a lot of plugins!");
+            }
+
+            if (targetTPS > 20) {
+                sender.sendMessage("§cWarning: Your target TPS is higher than 20. Your server might not be able to keep up with this.");
+            }
+        }
+
+        MinecraftServer.MS_PER_TICK = targetMSPT;
+        MinecraftServer.TPS = 1000 / targetMSPT;
+        MinecraftServer.TICK_TIME = 1000000000 / MinecraftServer.TPS;
+        MinecraftServer.TICKS_UNTIL_TPS_RESET = resetTPSIn;
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e9b03b225544e507669dcc2987da163de011c3b1..18b179e4fac61a2ebda6a8e8beb607996a28c0d8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -275,8 +275,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public boolean forceTicks; // Paper
     // CraftBukkit end
     // Spigot start
-    public static final int TPS = 20;
-    public static final int TICK_TIME = 1000000000 / TPS;
+	// Dripstone start
+    public static int TPS = 20;
+    public static int TICK_TIME = 1000000000 / TPS;
+	public static int TICKS_UNTIL_TPS_RESET = -1;
+    public static int MS_PER_TICK = 50;
+	// Dripstone end
+	// Spigot start
     private static final int SAMPLE_INTERVAL = 20; // Paper
     public final double[] recentTps = new double[ 3 ];
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
@@ -1104,7 +1109,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
                         if (server.getWarnOnOverload()) // CraftBukkit
                             MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.nextTick += j * 50L;
+                        this.nextTick += j * MinecraftServer.MS_PER_TICK; // Dripstone
                         this.lastOverloadTime = this.nextTick;
                     }
 
@@ -1128,7 +1133,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                     lastTick = curTime;
-                    this.nextTick += 50L;
+                    this.nextTick += MinecraftServer.MS_PER_TICK; // Dripstone
                     GameProfilerTick gameprofilertick = GameProfilerTick.a("Server");
 
                     this.a(gameprofilertick);
@@ -1137,7 +1142,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                     this.a(this::canSleepForTick);
                     this.methodProfiler.exitEnter("nextTickWait");
                     this.X = true;
-                    this.W = Math.max(SystemUtils.getMonotonicMillis() + 50L, this.nextTick);
+                    this.W = Math.max(SystemUtils.getMonotonicMillis() + MinecraftServer.MS_PER_TICK, this.nextTick); // Dripstone
                     this.sleepForTick();
                     this.methodProfiler.exit();
                     this.methodProfiler.b();
@@ -1600,6 +1605,20 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
         MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
+        // Dripstone start - check if TPS can be reset to 20.
+        if (MinecraftServer.TICKS_UNTIL_TPS_RESET != -1) {
+            // Decrease ticks remaining.
+            MinecraftServer.TICKS_UNTIL_TPS_RESET--;
+            // Reset TPS.
+            if (MinecraftServer.TICKS_UNTIL_TPS_RESET == 0) {
+                MinecraftServer.MS_PER_TICK = 50;
+                MinecraftServer.TPS = 20;
+                MinecraftServer.TICK_TIME = 1000000000 / 20;
+                MinecraftServer.TICKS_UNTIL_TPS_RESET = -1;
+            }
+        }
+        // Dripstone end.
+
         this.methodProfiler.exit();
     }
 
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index e62890433ffbe0b4e48942fe6c38b599a19e58fd..3c39b8bbe2ea0f4caf8544f1dd5f8cfa3bde131e 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -47,7 +47,17 @@ public class TicksPerSecondCommand extends Command
     private boolean hasShownMemoryWarning; // Paper
     private static String format(double tps) // Paper - Made static
     {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        // Dripstone Start - Completely rewritten to work with the setmaxtps command.
+        int maxTPS = MinecraftServer.TPS;
+        ChatColor color;
+        if (tps > maxTPS * 0.9f)  // 90% (TPS > 18 on Spigot)
+            color = ChatColor.GREEN;
+        else if (tps > maxTPS * 0.8f) // 80% (TPS > 16 on Spigot)
+            color = ChatColor.YELLOW;
+        else // Everything else.
+            color = ChatColor.RED;
+
+        return color + (tps > maxTPS * 1.05f ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, maxTPS);
+        // Dripstone end.
     }
 }
