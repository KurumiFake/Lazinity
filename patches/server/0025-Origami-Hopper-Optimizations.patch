From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Tue, 24 Mar 2020 17:40:50 +0100
Subject: [PATCH] (Origami) Hopper Optimizations

- Don't tick empty hoppers: This avoids ticking hoppers that are only used to transport items in a
chain.
- Add config option to increase the full hopper cooldown
- Only set check cooldown if it's bigger than already set cooldown

Original code by Minebench, licensed under GPLv3
You can find the original code on https://github.com/Minebench/Origami

diff --git a/src/main/java/me/kurumifake/lazinity/LazinityConfig.java b/src/main/java/me/kurumifake/lazinity/LazinityConfig.java
index ba5f6e80cbfd8326b1786f1fc1a0f6cac4771454..7e90eb114c3b69aa3b56f7064049dd39d4944658 100644
--- a/src/main/java/me/kurumifake/lazinity/LazinityConfig.java
+++ b/src/main/java/me/kurumifake/lazinity/LazinityConfig.java
@@ -123,4 +123,11 @@ public final class LazinityConfig {
     private static void enableBookDeserialization() {
         enableBookDeserialization = getBoolean("enable-book-deserialization", false);
     }
+
+    public boolean tickEmptyHoppers = false;
+    public int fullHopperCooldown = 128;
+    private void hopperOptimizations() {
+        tickEmptyHoppers = getBoolean("tick-empty-hoppers", tickEmptyHoppers);
+        fullHopperCooldown = getInt("ticks-per.full-hopper-cooldown", fullHopperCooldown);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/item/EntityItem.java b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
index cb5c4379bfd16a74debaf23f840dbf1e5535ad7f..7513ca8ef416ee9ce87ba3faf0a2d2a1a58c82c1 100644
--- a/src/main/java/net/minecraft/world/entity/item/EntityItem.java
+++ b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
@@ -168,6 +168,13 @@ public class EntityItem extends Entity {
                 }
             }
 
+            // Origami start - don't tick empty hoppers
+            if (!world.lazinityConfig.tickEmptyHoppers && locY() >= 1 && (this.age < 10 || this.age > this.getDespawnRate() - 10
+                    || (int) locX() != (int) lastX || (int) locZ() != (int) lastZ || (int) locY() != (int) lastY)) {
+                net.minecraft.world.level.block.entity.TileEntityHopper.enableTicking(world.getTileEntity(new BlockPosition(locX(), locY() - 1, locZ())), 0);
+            }
+            // Origami end
+
             if (!this.world.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/EntityMinecartContainer.java b/src/main/java/net/minecraft/world/entity/vehicle/EntityMinecartContainer.java
index 0166d11cb540a536390f486e1069d6119d8d23d6..c964ef3835884e9b415222b46afbfa6c1de7bd10 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/EntityMinecartContainer.java
@@ -164,7 +164,6 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
         if (!itemstack.isEmpty() && itemstack.getCount() > this.getMaxStackSize()) {
             itemstack.setCount(this.getMaxStackSize());
         }
-
     }
 
     @Override
@@ -178,7 +177,25 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     }
 
     @Override
-    public void update() {}
+    public void update() {
+        // Origami start - don't tick empty hoppers
+        checkHopperBelow();
+    }
+
+    @Override
+    public void tick() {
+        super.tick();
+        if (locY() >= 1 && ((int) locX() != (int) lastX || (int) locZ() != (int) lastZ || (int) locY() != (int) lastY)) {
+            checkHopperBelow();
+        }
+    }
+
+    private void checkHopperBelow() {
+        if (!world.lazinityConfig.tickEmptyHoppers && !this.isEmpty()) {
+            net.minecraft.world.level.block.entity.TileEntityHopper.enableTicking(world.getTileEntity(new net.minecraft.core.BlockPosition(locX(), locY() - 1, locZ())), 0);
+        }
+    }
+    // Origami end
 
     @Override
     public boolean a(EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/world/level/block/BlockComposter.java b/src/main/java/net/minecraft/world/level/block/BlockComposter.java
index e4e519ba773388b8d26a8f794a6eff51e3d8f72e..f1568c79d672424cb79d53e8ffb11ecef2aed9e3 100644
--- a/src/main/java/net/minecraft/world/level/block/BlockComposter.java
+++ b/src/main/java/net/minecraft/world/level/block/BlockComposter.java
@@ -23,6 +23,7 @@ import net.minecraft.world.level.GeneratorAccess;
 import net.minecraft.world.level.IBlockAccess;
 import net.minecraft.world.level.IMaterial;
 import net.minecraft.world.level.World;
+import net.minecraft.world.level.block.entity.TileEntityHopper;
 import net.minecraft.world.level.block.state.BlockBase;
 import net.minecraft.world.level.block.state.BlockStateList;
 import net.minecraft.world.level.block.state.IBlockData;
@@ -283,6 +284,7 @@ public class BlockComposter extends Block implements IInventoryHolder {
         if ((Integer) iblockdata.get(BlockComposter.a) == 7) {
             worldserver.setTypeAndData(blockposition, (IBlockData) iblockdata.a((IBlockState) BlockComposter.a), 3);
             worldserver.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_READY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            net.minecraft.world.level.block.entity.TileEntityHopper.enableTicking(worldserver.getTileEntity(new BlockPosition(blockposition.getX(), blockposition.getY() - 1, blockposition.getZ())), 0); // Origami - don't tick empty hoppers
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TileEntityContainer.java b/src/main/java/net/minecraft/world/level/block/entity/TileEntityContainer.java
index fb7a1a854efcf42f0351ef521aff67d5fcc4ab27..337fbe1395967d199bb73cf14441d4680830e19c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TileEntityContainer.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TileEntityContainer.java
@@ -98,4 +98,14 @@ public abstract class TileEntityContainer extends TileEntity implements IInvento
         return new org.bukkit.Location(world.getWorld(), position.getX(), position.getY(), position.getZ());
     }
     // CraftBukkit end
+
+    // Origami start - don't tick empty hoppers
+    @Override
+    public void update() {
+        super.update();
+        if (world != null && !world.lazinityConfig.tickEmptyHoppers) {
+            TileEntityHopper.enableTicking(world.getTileEntity(position.shift(net.minecraft.core.EnumDirection.DOWN)), world.spigotConfig.hopperCheck);
+        }
+    }
+    // Origami end
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TileEntityHopper.java b/src/main/java/net/minecraft/world/level/block/entity/TileEntityHopper.java
index 056d280c7db6fc532d83b2a547d6a01402a49bd0..47aef595716e7e11ed678ce6040ad4989e21f754 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TileEntityHopper.java
@@ -47,8 +47,9 @@ import org.bukkit.inventory.Inventory;
 public class TileEntityHopper extends TileEntityLootable implements IHopper, ITickable {
 
     private gg.airplane.structs.ItemListWithBitset items; // Airplane
-    private int j;
+    private int j; public int getCooldown() { return this.j; } // Origami - OBFHELPER
     private long k;
+    public boolean shouldTick = true; // Origami - don't tick empty hoppers
 
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -143,7 +144,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         if (itemstack.getCount() > this.getMaxStackSize()) {
             itemstack.setCount(this.getMaxStackSize());
         }
-
+        shouldTick = true; // Origami - don't tick empty hoppers
     }
 
     @Override
@@ -153,7 +154,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
     @Override
     public void tick() {
-        if (this.world != null && !this.world.isClientSide) {
+        if (this.world != null && !this.world.isClientSide && (shouldTick || world.lazinityConfig.tickEmptyHoppers)) { // Origami - don't tick empty hoppers
             --this.j;
             this.k = this.world.getTime();
             if (!this.m()) {
@@ -162,7 +163,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 boolean result = this.a(() -> {
                     return a((IHopper) this);
                 });
-                if (!result && this.world.spigotConfig.hopperCheck > 1) {
+                if (!result && this.world.spigotConfig.hopperCheck > 1 && this.world.spigotConfig.hopperCheck > this.getCooldown()) { // Origami - only set check cooldown if it's bigger than already set one
                     this.setCooldown(this.world.spigotConfig.hopperCheck);
                 }
                 // Spigot end
@@ -171,6 +172,26 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         }
     }
 
+    // Origami start - don't tick empty hoppers
+    @Override
+    public void update() {
+        shouldTick = true;
+        super.update();
+    }
+
+    public static void enableTicking(TileEntity tileEntity, int cooldown) {
+        if (tileEntity instanceof TileEntityHopper) {
+            if (!((TileEntityHopper) tileEntity).shouldTick) {
+                if (((TileEntityHopper) tileEntity).getCooldown() > cooldown && tileEntity.getBlock().get(BlockHopper.ENABLED)) {
+                    // Force the hopper to update if it is enabled and didn't tick/decrease cooldown before
+                    ((TileEntityHopper) tileEntity).setCooldown(cooldown);
+                }
+                ((TileEntityHopper) tileEntity).shouldTick = true;
+            }
+        }
+    }
+    // Origami end
+
     private boolean a(Supplier<Boolean> supplier) {
         if (this.world != null && !this.world.isClientSide) {
             if (!this.m() && (Boolean) this.getBlock().get(BlockHopper.ENABLED)) {
@@ -178,6 +199,10 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
 
                 if (!this.isEmpty()) {
                     flag = this.k();
+                    // Origami - don't tick empty hoppers
+                } else {
+                    shouldTick = world.lazinityConfig.tickEmptyHoppers;
+                    // Origami end
                 }
 
                 if (!this.j()) {
@@ -260,7 +285,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             }
         }
         if (foundItem && world.paperConfig.cooldownHopperWhenFull) { // Inventory was full - cooldown
-            this.setCooldown(world.spigotConfig.hopperTransfer);
+            this.setCooldown(world.lazinityConfig.fullHopperCooldown > -1 ? world.lazinityConfig.fullHopperCooldown : world.spigotConfig.hopperTransfer); // Origami - full hopper cooldown config
         }
         return false;
     }
@@ -300,7 +325,13 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         origItemStack.setCount(origCount);
 
         if (world.paperConfig.cooldownHopperWhenFull) {
-            cooldownHopper(ihopper);
+            // Origami start - full hopper cooldown config
+            if (ihopper instanceof TileEntityHopper) {
+                ((TileEntityHopper) ihopper).setCooldown(world.lazinityConfig.fullHopperCooldown > -1 ? world.lazinityConfig.fullHopperCooldown : world.spigotConfig.hopperTransfer);
+            } else if (ihopper instanceof EntityMinecartHopper) {
+                ((EntityMinecartHopper) ihopper).setCooldown(world.spigotConfig.hopperTransfer / 2);
+            }
+            // Origami end - full hopper cooldown config
         }
 
         return false;
@@ -518,6 +549,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 entityitem = (EntityItem) iterator.next();
             } while (!a((IInventory) ihopper, entityitem));
 
+            if (ihopper instanceof TileEntityHopper) ((TileEntityHopper) ihopper).shouldTick = true; // Origami - don't tick empty hoppers
             return true;
         }
     }
@@ -606,7 +638,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                 itemstack = a(iinventory, iinventory1, itemstack, k, enumdirection);
             }
         }
-
+        if (iinventory1 instanceof TileEntityHopper) ((TileEntityHopper) iinventory1).shouldTick = true; // Origami - don't tick empty hoppers
         return itemstack;
     }
 
@@ -747,7 +779,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         return (double) this.position.getZ() + 0.5D;
     }
 
-    private void setCooldown(int i) {
+    public void setCooldown(int i) { // Origami - make public
         this.j = i;
     }
 
@@ -774,6 +806,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             BlockPosition blockposition = this.getPosition();
 
             if (VoxelShapes.c(VoxelShapes.a(entity.getBoundingBox().d((double) (-blockposition.getX()), (double) (-blockposition.getY()), (double) (-blockposition.getZ()))), this.aa_(), OperatorBoolean.AND)) {
+                enableTicking(this, 0); // Origami - don't tick empty hoppers
                 this.a(() -> {
                     return a((IInventory) this, (EntityItem) entity);
                 });
