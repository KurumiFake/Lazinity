From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Sat, 19 Mar 2022 05:16:28 +0000
Subject: [PATCH] useless patch xd


diff --git a/src/main/java/com/destroystokyo/paper/MSPTCommand.java b/src/main/java/com/destroystokyo/paper/MSPTCommand.java
index d0211d4f39f9d6af1d751ac66342b42cc6d7ba6d..55833a6767cf2d7a852afb4a764bf6bf761a029b 100644
--- a/src/main/java/com/destroystokyo/paper/MSPTCommand.java
+++ b/src/main/java/com/destroystokyo/paper/MSPTCommand.java
@@ -1,7 +1,7 @@
 package com.destroystokyo.paper;
 
 import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
+//import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -38,8 +38,8 @@ public class MSPTCommand extends Command {
         times.addAll(eval(server.tickTimes10s.getTimes()));
         times.addAll(eval(server.tickTimes60s.getTimes()));
 
-        sender.sendMessage("§6Server tick times §e(§7avg§e/§7min§e/§7max§e)§6 from last 5s§7,§6 10s§7,§6 1m§e:");
-        sender.sendMessage(String.format("§6◴ %s§7/%s§7/%s§e, %s§7/%s§7/%s§e, %s§7/%s§7/%s", times.toArray()));
+        sender.sendMessage("Server tick times (avg/min/max) from last 5s, 10s, 1m:");
+        sender.sendMessage(String.format("%s/%s/%s, %s/%s/%s, %s/%s/%s", times.toArray()));
         return true;
     }
 
@@ -55,10 +55,10 @@ public class MSPTCommand extends Command {
         double avgD = ((double) total / (double) times.length) * 1.0E-6D;
         double minD = ((double) min) * 1.0E-6D;
         double maxD = ((double) max) * 1.0E-6D;
-        return Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
+        return Arrays.asList(/*getColor(avgD), getColor(minD), getColor(maxD)*/);
     }
 
-    private static String getColor(double avg) {
+    /*private static String getColor(double avg) {
         return ChatColor.COLOR_CHAR + (avg >= 50 ? "c" : avg >= 40 ? "e" : "a") + DF.format(avg);
-    }
+    }*/ // Lazinity
 }
diff --git a/src/main/java/gg/airplane/AirplaneCommand.java b/src/main/java/gg/airplane/AirplaneCommand.java
index 89c89e633f14b5820147e734b1b7ad8cadfdce80..b306d9ea0b87f9e2d373198de55aea51a8fdfe42 100644
--- a/src/main/java/gg/airplane/AirplaneCommand.java
+++ b/src/main/java/gg/airplane/AirplaneCommand.java
@@ -57,7 +57,7 @@ public class AirplaneCommand extends Command {
 
             Command.broadcastCommandMessage(sender, prefix + "Airplane configuration has been reloaded.");
         } else if (args[0].equalsIgnoreCase("version")) {
-            Command.broadcastCommandMessage(sender, prefix + "This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+            Command.broadcastCommandMessage(sender, prefix + "Running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
         }
 
         return true;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e9b03b225544e507669dcc2987da163de011c3b1..c5e6bed458d1466afebc8dc4c586a58ba4f25d70 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -747,7 +747,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // CraftBukkit end
         if (worldserver.getWorld().getKeepSpawnInMemory()) { // Paper
 
-        MinecraftServer.LOGGER.info("Preparing start region for dimension {}", worldserver.getDimensionKey().a());
+        MinecraftServer.LOGGER.info("Preparing start region for {}", worldserver.getDimensionKey().a());
         BlockPosition blockposition = worldserver.getSpawn();
 
         worldloadlistener.a(new ChunkCoordIntPair(blockposition));
@@ -838,7 +838,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             WorldServer worldserver = (WorldServer) iterator.next();
 
             if (!flag) {
-                MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver, worldserver.getDimensionKey().a());
+                MinecraftServer.LOGGER.info("Saving chunks for '{}'/{}", worldserver, worldserver.getDimensionKey().a());
             }
 
             worldserver.save((IProgressUpdate) null, flag1, worldserver.savingDisabled && !flag2);
@@ -900,7 +900,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
         // Paper end
         // CraftBukkit end
-        MinecraftServer.LOGGER.info("Stopping server");
+        MinecraftServer.LOGGER.info("Stopping");
         MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
@@ -954,7 +954,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         try {
             this.convertable.close();
         } catch (IOException ioexception1) {
-            MinecraftServer.LOGGER.error("Failed to unlock level {}", this.convertable.getLevelName(), ioexception1);
+            MinecraftServer.LOGGER.error("Failed to unlock {}", this.convertable.getLevelName(), ioexception1);
         }
         // Spigot start
         MCUtil.asyncExecutor.shutdown(); // Paper
@@ -970,7 +970,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.close(true, true); // Paper
         LOGGER.info("Closing Thread Pool");
         SystemUtils.shutdownServerThreadPool(); // Paper
-        LOGGER.info("Closing Server");
+        LOGGER.info("Closing");
         try {
             net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
         } catch (Exception e) {
@@ -999,7 +999,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.isRunning = false;
         this.isRestarting = isRestarting;
         this.hasLoggedStop = true; // Paper
-        if (isDebugging()) TraceUtil.dumpTraceForThread("Server stopped"); // Paper
+        if (isDebugging()) TraceUtil.dumpTraceForThread("Stopped"); // Paper
         if (flag) {
             try {
                 this.serverThread.join();
@@ -1087,7 +1087,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 // anything at 3+ won't be caught here but also will trip watchdog....
                 // tasks are default scheduled at -1 + delay, and first tick will tick at 1
                 String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (SystemUtils.getMonotonicNanos() - serverStartTime) / 1.0E9D);
-                LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
+                LOGGER.info("Done ({}).", doneTime);
                 // Paper end
 
                 com.tuinity.tuinity.config.TuinityConfig.createWorldSections = false; // Tuinity - don't let plugin created worlds fill our config
@@ -1103,7 +1103,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                         long j = i / 50L;
 
                         if (server.getWarnOnOverload()) // CraftBukkit
-                            MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                            MinecraftServer.LOGGER.warn("Can't keep up! Running {}ms or {} ticks behind", i, j);
                         this.nextTick += j * 50L;
                         this.lastOverloadTime = this.nextTick;
                     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 30c9125900bd2d6872041ea182192e582d701db9..5836c44bbd019a7eeaad875eddad9b953f4d6c92 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -178,10 +178,10 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         thread.setDaemon(true);
         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(DedicatedServer.LOGGER));
         thread.start();
-        DedicatedServer.LOGGER.info("Starting minecraft server version " + SharedConstants.getGameVersion().getName());
+        /*DedicatedServer.LOGGER.info("Starting minecraft server version " + SharedConstants.getGameVersion().getName());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
-        }
+        }*/ // Lazinity - "hu at"
 
         DedicatedServer.LOGGER.info("Loading properties");
         DedicatedServerProperties dedicatedserverproperties = this.propertyManager.getProperties();
@@ -297,7 +297,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             TileEntitySkull.a(this.getUserCache());
             TileEntitySkull.a(this.getMinecraftSessionService());
             UserCache.a(this.getOnlineMode());
-            DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getWorld());
+            DedicatedServer.LOGGER.info("Preparing \"{}\"", this.getWorld());
             this.loadWorld(convertable.getLevelName()); // CraftBukkit
             long j = SystemUtils.getMonotonicNanos() - i;
             String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
diff --git a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
index fc687515fdfd47e90e11a2832de07d784edeef25..f04f9596a40b9222db2182ede512f82f2957dfc7 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunkMap.java
@@ -1004,7 +1004,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             });
             this.world.asyncChunkTaskManager.flush(); // Paper - flush to preserve behavior compat with pre-async behaviour
 //            this.i(); // Paper - nuke IOWorker
-            PlayerChunkMap.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.w.getName());
+            PlayerChunkMap.LOGGER.info("TACS ({}): All chunks are saved", this.w.getName()); // Lazinity - shorten msgs
         } else {
             visibleChunks.values().stream().filter(PlayerChunk::hasBeenLoaded).forEach((playerchunk) -> {
                 IChunkAccess ichunkaccess = (IChunkAccess) playerchunk.getChunkSave().getNow(null); // CraftBukkit - decompile error
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 700f2c76b3a493677a1205d585f7b56512fb1652..53cc9a1a1b2a0316f8c6d7b93c3cf428a7c5d114 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -266,7 +266,7 @@ public class Main {
                     System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false"); // Paper
                 }
 
-                if (false && Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
+                /*if (false && Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
                     Date buildDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse(Main.class.getPackage().getImplementationVendor()); // Paper
 
                     Calendar deadline = Calendar.getInstance();
@@ -279,7 +279,7 @@ public class Main {
                         //Thread.sleep(TimeUnit.SECONDS.toMillis(20));
                         // Paper End
                     }
-                }
+                }*/ // Lazinity - hu ce
 
                 // Paper start - Log Java and OS versioning to help with debugging plugin issues
                 java.lang.management.RuntimeMXBean runtimeMX = java.lang.management.ManagementFactory.getRuntimeMXBean();
@@ -295,7 +295,7 @@ public class Main {
                 // Paper end
                 System.setProperty( "library.jansi.version", "Paper" ); // Paper - set meaningless jansi version to prevent git builds from crashing on Windows
                 me.kurumifake.lazinity.LazinityConfig.init((java.io.File) options.valueOf("lazinity-settings")); // Lazinity - server config
-                System.out.println("Loading libraries, please wait...");
+                System.out.println("Loading libraries...");
                 net.minecraft.server.Main.main(options);
             } catch (Throwable t) {
                 t.printStackTrace();
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index e62890433ffbe0b4e48942fe6c38b599a19e58fd..679122082db9bf58d5a1f5c49a9a06c927b1c270 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,7 +1,7 @@
 package org.spigotmc;
 
 import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
+//import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -28,26 +28,27 @@ public class TicksPerSecondCommand extends Command
         double[] tps = org.bukkit.Bukkit.getTPS();
         String[] tpsAvg = new String[tps.length];
 
-        for ( int i = 0; i < tps.length; i++) {
+        /*for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = format( tps[i] );
-        }
-        sender.sendMessage(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        }*/ // Lazinity - brh
+        // Lazinity start - shorten message (who asked tho)
+        sender.sendMessage("TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
-            sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
-            if (!hasShownMemoryWarning) {
+            sender.sendMessage("Current memory usage: " + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)"); // why caps lel
+            /*if (!hasShownMemoryWarning) {
                 sender.sendMessage(ChatColor.RED + "Warning: " + ChatColor.GOLD + " Memory usage on modern garbage collectors is not a stable value and it is perfectly normal to see it reach max. Please do not pay it much attention.");
                 hasShownMemoryWarning = true;
-            }
+            }*/ // Lazinity end
         }
         // Paper end
 
         return true;
     }
 
-    private boolean hasShownMemoryWarning; // Paper
+    /*private boolean hasShownMemoryWarning; // Paper // Lazinity - we dont need cols
     private static String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
                 + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
-    }
+    }*/
 }
