From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Sun, 18 Apr 2021 09:55:05 +0000
Subject: [PATCH] Remove VersionFetcher


diff --git a/0007-Remove-VersionFetcher.patch b/0007-Remove-VersionFetcher.patch
new file mode 100644
index 0000000000000000000000000000000000000000..d84e21bf062ae330056ef504868397968ff3d904
--- /dev/null
+++ b/0007-Remove-VersionFetcher.patch
@@ -0,0 +1,168 @@
+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
+From: foss-mc <69294560+foss-mc@users.noreply.github.com>
+Date: Sun, 18 Apr 2021 09:55:05 +0000
+Subject: [PATCH] Remove VersionFetcher
+
+
+diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+deleted file mode 100644
+index d50b61876f15d95b836b3dd81d9c3492c91a8448..0000000000000000000000000000000000000000
+--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
++++ /dev/null
+@@ -1,139 +0,0 @@
+-package com.destroystokyo.paper;
+-
+-import com.destroystokyo.paper.util.VersionFetcher;
+-import com.google.common.base.Charsets;
+-import com.google.common.io.Resources;
+-import com.google.gson.*;
+-import net.kyori.adventure.text.Component;
+-import net.kyori.adventure.text.TextComponent;
+-import net.kyori.adventure.text.format.NamedTextColor;
+-import net.kyori.adventure.text.format.TextDecoration;
+-
+-import javax.annotation.Nonnull;
+-import javax.annotation.Nullable;
+-import java.io.*;
+-import java.net.HttpURLConnection;
+-import java.net.URL;
+-import java.util.stream.StreamSupport;
+-
+-public class PaperVersionFetcher implements VersionFetcher {
+-    private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
+-    private static final String GITHUB_BRANCH_NAME = "master";
+-    private static @Nullable String mcVer;
+-
+-    @Override
+-    public long getCacheTime() {
+-        return 720000;
+-    }
+-
+-    @Nonnull
+-    @Override
+-    public Component getVersionMessage(@Nonnull String serverVersion) {
+-        String[] parts = serverVersion.substring("git-Tuinity-".length()).split("[-\\s]"); // Tuinity
+-        final Component updateMessage = getUpdateStatusMessage("Spottedleaf/Tuinity", GITHUB_BRANCH_NAME, parts[0]); // Tuinity
+-        final Component history = getHistory();
+-
+-        return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
+-    }
+-
+-    private static @Nullable String getMinecraftVersion() {
+-        if (mcVer == null) {
+-            java.util.regex.Matcher matcher = VER_PATTERN.matcher(org.bukkit.Bukkit.getBukkitVersion());
+-            if (matcher.find()) {
+-                String result = matcher.group();
+-                mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
+-            } else {
+-                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to PaperMC!");
+-                org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
+-                org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
+-            }
+-        }
+-
+-        return mcVer;
+-    }
+-
+-    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+-        int distance;
+-        // Tuinity - we don't have jenkins setup
+-            versionInfo = versionInfo.replace("\"", "");
+-            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+-        // Tuinity - we don't have jenkins setup
+-
+-        switch (distance) {
+-            case -1:
+-                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+-            case 0:
+-                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+-            case -2:
+-                return Component.text("Unknown version", NamedTextColor.YELLOW);
+-            default:
+-                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
+-        }
+-    }
+-
+-    private static int fetchDistanceFromSiteApi(int jenkinsBuild, @Nullable String siteApiVersion) {
+-        if (siteApiVersion == null) { return -1; }
+-        try {
+-            try (BufferedReader reader = Resources.asCharSource(
+-                new URL("https://papermc.io/api/v2/projects/paper/versions/" + siteApiVersion),
+-                Charsets.UTF_8
+-            ).openBufferedStream()) {
+-                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+-                JsonArray builds = json.getAsJsonArray("builds");
+-                int latest = StreamSupport.stream(builds.spliterator(), false)
+-                    .mapToInt(e -> e.getAsInt())
+-                    .max()
+-                    .getAsInt();
+-                return latest - jenkinsBuild;
+-            } catch (JsonSyntaxException ex) {
+-                ex.printStackTrace();
+-                return -1;
+-            }
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return -1;
+-        }
+-    }
+-
+-    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+-    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+-        try {
+-            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+-            connection.connect();
+-            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+-                String status = obj.get("status").getAsString();
+-                switch (status) {
+-                    case "identical":
+-                        return 0;
+-                    case "behind":
+-                        return obj.get("behind_by").getAsInt();
+-                    default:
+-                        return -1;
+-                }
+-            } catch (JsonSyntaxException | NumberFormatException e) {
+-                e.printStackTrace();
+-                return -1;
+-            }
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return -1;
+-        }
+-    }
+-
+-    @Nullable
+-    private Component getHistory() {
+-        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+-        if (data == null) {
+-            return null;
+-        }
+-
+-        final String oldVersion = data.getOldVersion();
+-        if (oldVersion == null) {
+-            return null;
+-        }
+-
+-        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+-    }
+-}
+diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+index 6cb8608f8238c4a8c346b92ba672c8cc1c0cbcc4..afc33ac38bdcc3fdca1dd98299888309d4d89c24 100644
+--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
++++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+@@ -395,10 +395,10 @@ public final class CraftMagicNumbers implements UnsafeValues {
+         return com.destroystokyo.paper.PaperConfig.timingsServerName;
+     }
+ 
+-    @Override
++    /*@Override // Patina - Remove VersionFetcher
+     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+         return new com.destroystokyo.paper.PaperVersionFetcher();
+-    }
++    }*/
+ 
+     @Override
+     public boolean isSupportedApiVersion(String apiVersion) {
diff --git a/patch b/patch
new file mode 100644
index 0000000000000000000000000000000000000000..d84e21bf062ae330056ef504868397968ff3d904
--- /dev/null
+++ b/patch
@@ -0,0 +1,168 @@
+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
+From: foss-mc <69294560+foss-mc@users.noreply.github.com>
+Date: Sun, 18 Apr 2021 09:55:05 +0000
+Subject: [PATCH] Remove VersionFetcher
+
+
+diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+deleted file mode 100644
+index d50b61876f15d95b836b3dd81d9c3492c91a8448..0000000000000000000000000000000000000000
+--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
++++ /dev/null
+@@ -1,139 +0,0 @@
+-package com.destroystokyo.paper;
+-
+-import com.destroystokyo.paper.util.VersionFetcher;
+-import com.google.common.base.Charsets;
+-import com.google.common.io.Resources;
+-import com.google.gson.*;
+-import net.kyori.adventure.text.Component;
+-import net.kyori.adventure.text.TextComponent;
+-import net.kyori.adventure.text.format.NamedTextColor;
+-import net.kyori.adventure.text.format.TextDecoration;
+-
+-import javax.annotation.Nonnull;
+-import javax.annotation.Nullable;
+-import java.io.*;
+-import java.net.HttpURLConnection;
+-import java.net.URL;
+-import java.util.stream.StreamSupport;
+-
+-public class PaperVersionFetcher implements VersionFetcher {
+-    private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
+-    private static final String GITHUB_BRANCH_NAME = "master";
+-    private static @Nullable String mcVer;
+-
+-    @Override
+-    public long getCacheTime() {
+-        return 720000;
+-    }
+-
+-    @Nonnull
+-    @Override
+-    public Component getVersionMessage(@Nonnull String serverVersion) {
+-        String[] parts = serverVersion.substring("git-Tuinity-".length()).split("[-\\s]"); // Tuinity
+-        final Component updateMessage = getUpdateStatusMessage("Spottedleaf/Tuinity", GITHUB_BRANCH_NAME, parts[0]); // Tuinity
+-        final Component history = getHistory();
+-
+-        return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
+-    }
+-
+-    private static @Nullable String getMinecraftVersion() {
+-        if (mcVer == null) {
+-            java.util.regex.Matcher matcher = VER_PATTERN.matcher(org.bukkit.Bukkit.getBukkitVersion());
+-            if (matcher.find()) {
+-                String result = matcher.group();
+-                mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
+-            } else {
+-                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to PaperMC!");
+-                org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
+-                org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
+-            }
+-        }
+-
+-        return mcVer;
+-    }
+-
+-    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+-        int distance;
+-        // Tuinity - we don't have jenkins setup
+-            versionInfo = versionInfo.replace("\"", "");
+-            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+-        // Tuinity - we don't have jenkins setup
+-
+-        switch (distance) {
+-            case -1:
+-                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+-            case 0:
+-                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+-            case -2:
+-                return Component.text("Unknown version", NamedTextColor.YELLOW);
+-            default:
+-                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
+-        }
+-    }
+-
+-    private static int fetchDistanceFromSiteApi(int jenkinsBuild, @Nullable String siteApiVersion) {
+-        if (siteApiVersion == null) { return -1; }
+-        try {
+-            try (BufferedReader reader = Resources.asCharSource(
+-                new URL("https://papermc.io/api/v2/projects/paper/versions/" + siteApiVersion),
+-                Charsets.UTF_8
+-            ).openBufferedStream()) {
+-                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
+-                JsonArray builds = json.getAsJsonArray("builds");
+-                int latest = StreamSupport.stream(builds.spliterator(), false)
+-                    .mapToInt(e -> e.getAsInt())
+-                    .max()
+-                    .getAsInt();
+-                return latest - jenkinsBuild;
+-            } catch (JsonSyntaxException ex) {
+-                ex.printStackTrace();
+-                return -1;
+-            }
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return -1;
+-        }
+-    }
+-
+-    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+-    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+-        try {
+-            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+-            connection.connect();
+-            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+-                String status = obj.get("status").getAsString();
+-                switch (status) {
+-                    case "identical":
+-                        return 0;
+-                    case "behind":
+-                        return obj.get("behind_by").getAsInt();
+-                    default:
+-                        return -1;
+-                }
+-            } catch (JsonSyntaxException | NumberFormatException e) {
+-                e.printStackTrace();
+-                return -1;
+-            }
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return -1;
+-        }
+-    }
+-
+-    @Nullable
+-    private Component getHistory() {
+-        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+-        if (data == null) {
+-            return null;
+-        }
+-
+-        final String oldVersion = data.getOldVersion();
+-        if (oldVersion == null) {
+-            return null;
+-        }
+-
+-        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+-    }
+-}
+diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+index 6cb8608f8238c4a8c346b92ba672c8cc1c0cbcc4..afc33ac38bdcc3fdca1dd98299888309d4d89c24 100644
+--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
++++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+@@ -395,10 +395,10 @@ public final class CraftMagicNumbers implements UnsafeValues {
+         return com.destroystokyo.paper.PaperConfig.timingsServerName;
+     }
+ 
+-    @Override
++    /*@Override // Patina - Remove VersionFetcher
+     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+         return new com.destroystokyo.paper.PaperVersionFetcher();
+-    }
++    }*/
+ 
+     @Override
+     public boolean isSupportedApiVersion(String apiVersion) {
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
deleted file mode 100644
index 6f1c08e4a3af69acbbb51ce81e74f1224776aa56..0000000000000000000000000000000000000000
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.destroystokyo.paper;
-
-import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.common.base.Charsets;
-import com.google.common.io.Resources;
-import com.google.gson.*;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.TextComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import java.io.*;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.util.stream.StreamSupport;
-
-public class PaperVersionFetcher implements VersionFetcher {
-    private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
-    private static final String GITHUB_BRANCH_NAME = "ver/1.16.5"; // Tuinity
-    private static @Nullable String mcVer;
-
-    @Override
-    public long getCacheTime() {
-        return 720000;
-    }
-
-    @Nonnull
-    @Override
-    public Component getVersionMessage(@Nonnull String serverVersion) {
-        String[] parts = serverVersion.substring("git-Lazinity-".length()).split("[-\\s]"); // Tuinity
-        final Component updateMessage = getUpdateStatusMessage("KurumiFake/Lazinity", GITHUB_BRANCH_NAME, parts[0]); // Tuinity
-        final Component history = getHistory();
-
-        return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
-    }
-
-    private static @Nullable String getMinecraftVersion() {
-        if (mcVer == null) {
-            java.util.regex.Matcher matcher = VER_PATTERN.matcher(org.bukkit.Bukkit.getBukkitVersion());
-            if (matcher.find()) {
-                String result = matcher.group();
-                mcVer = result.substring(0, result.length() - 2); // strip 'R' anchor and trailing '-'
-            } else {
-                org.bukkit.Bukkit.getLogger().warning("Unable to match version to pattern! Report to PaperMC!");
-                org.bukkit.Bukkit.getLogger().warning("Pattern: " + VER_PATTERN.toString());
-                org.bukkit.Bukkit.getLogger().warning("Version: " + org.bukkit.Bukkit.getBukkitVersion());
-            }
-        }
-
-        return mcVer;
-    }
-
-    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
-        int distance;
-        // Tuinity - we don't have jenkins setup
-            versionInfo = versionInfo.replace("\"", "");
-            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
-        // Tuinity - we don't have jenkins setup
-
-        switch (distance) {
-            case -1:
-                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
-            case 0:
-                return Component.text("You are running the latest version", NamedTextColor.GREEN);
-            case -2:
-                return Component.text("Unknown version", NamedTextColor.YELLOW);
-            default:
-                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
-        }
-    }
-
-    /*private static int fetchDistanceFromSiteApi(int jenkinsBuild, @Nullable String siteApiVersion) {
-        if (siteApiVersion == null) { return -1; }
-        try {
-            try (BufferedReader reader = Resources.asCharSource(
-                new URL("https://papermc.io/api/v2/projects/paper/versions/" + siteApiVersion),
-                Charsets.UTF_8
-            ).openBufferedStream()) {
-                JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                JsonArray builds = json.getAsJsonArray("builds");
-                int latest = StreamSupport.stream(builds.spliterator(), false)
-                    .mapToInt(e -> e.getAsInt())
-                    .max()
-                    .getAsInt();
-                return latest - jenkinsBuild;
-            } catch (JsonSyntaxException ex) {
-                ex.printStackTrace();
-                return -1;
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-            return -1;
-        }
-    }*/
-
-    // Contributed by Techcable <Techcable@outlook.com> in GH-65
-    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
-        try {
-            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
-            connection.connect();
-            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
-            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
-                String status = obj.get("status").getAsString();
-                switch (status) {
-                    case "identical":
-                        return 0;
-                    case "behind":
-                        return obj.get("behind_by").getAsInt();
-                    default:
-                        return -1;
-                }
-            } catch (JsonSyntaxException | NumberFormatException e) {
-                e.printStackTrace();
-                return -1;
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-            return -1;
-        }
-    }
-
-    @Nullable
-    private Component getHistory() {
-        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
-        if (data == null) {
-            return null;
-        }
-
-        final String oldVersion = data.getOldVersion();
-        if (oldVersion == null) {
-            return null;
-        }
-
-        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 6cb8608f8238c4a8c346b92ba672c8cc1c0cbcc4..afc33ac38bdcc3fdca1dd98299888309d4d89c24 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -395,10 +395,10 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return com.destroystokyo.paper.PaperConfig.timingsServerName;
     }
 
-    @Override
+    /*@Override // Patina - Remove VersionFetcher
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
         return new com.destroystokyo.paper.PaperVersionFetcher();
-    }
+    }*/
 
     @Override
     public boolean isSupportedApiVersion(String apiVersion) {
